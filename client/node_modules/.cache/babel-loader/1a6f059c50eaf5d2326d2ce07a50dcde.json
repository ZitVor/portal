{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kusia\\\\Downloads\\\\Projects\\\\Diplom\\\\client\\\\src\\\\pages\\\\Practice\\\\PracticeFromUsers.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState, useCallback } from 'react';\nimport { useHttp } from '../../hook/http.hook';\nimport { AuthContext } from './../../context/AuthContext';\nimport { Loader } from '../../сomponents/Loader';\nimport { NavLink, useHistory } from 'react-router-dom';\nimport '../../index.css';\nimport { Practice } from './Practice';\nimport { ListOfUsersTask } from './ListOfUsersTask';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const PracticeFromUsers = () => {\n  _s();\n\n  const {\n    token\n  } = useContext(AuthContext);\n  const {\n    request,\n    loading\n  } = useHttp();\n  const [taskfromusers, setTask] = useState(null);\n  const taskfromusersId = useParams().id;\n  const getTask = useCallback(async () => {\n    try {\n      const fetched = await request(`/api/taskfromusers/`, 'GET', null, {\n        Authorization: `Bearer ${token}`\n      });\n      setTask(fetched);\n    } catch (e) {}\n  }, [token, request]);\n  useEffect(() => {\n    getTask();\n  }, [getTask]);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !loading && taskfromusers && /*#__PURE__*/_jsxDEV(ListOfUsersTask, {\n      taskfromusers: taskfromusers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 38\n    }, this)\n  }, void 0, false);\n};\n\n_s(PracticeFromUsers, \"YbUfGDz2y+vXjkBJYumKeO/F1O8=\", true, function () {\n  return [useHttp];\n});\n\n_c = PracticeFromUsers;\n\nvar _c;\n\n$RefreshReg$(_c, \"PracticeFromUsers\");","map":{"version":3,"sources":["C:/Users/Kusia/Downloads/Projects/Diplom/client/src/pages/Practice/PracticeFromUsers.js"],"names":["React","useContext","useEffect","useState","useCallback","useHttp","AuthContext","Loader","NavLink","useHistory","Practice","ListOfUsersTask","PracticeFromUsers","token","request","loading","taskfromusers","setTask","taskfromusersId","useParams","id","getTask","fetched","Authorization","e"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,SAA3B,EAAsCC,QAAtC,EAA+CC,WAA/C,QAAiE,OAAjE;AACA,SAAQC,OAAR,QAAsB,sBAAtB;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,SAAQC,MAAR,QAAqB,yBAArB;AACA,SAAQC,OAAR,EAAiBC,UAAjB,QAAkC,kBAAlC;AACA,OAAO,iBAAP;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,eAAT,QAAgC,mBAAhC;;;AAGA,OAAO,MAAOC,iBAAiB,GAAG,MAAK;AAAA;;AACnC,QAAM;AAACC,IAAAA;AAAD,MAAUZ,UAAU,CAACK,WAAD,CAA1B;AACF,QAAM;AAACQ,IAAAA,OAAD;AAAUC,IAAAA;AAAV,MAAqBV,OAAO,EAAlC;AACA,QAAM,CAACW,aAAD,EAAgBC,OAAhB,IAA2Bd,QAAQ,CAAC,IAAD,CAAzC;AAEA,QAAMe,eAAe,GAAGC,SAAS,GAAGC,EAApC;AACA,QAAMC,OAAO,GAAGjB,WAAW,CAAC,YAAY;AACtC,QAAI;AACF,YAAMkB,OAAO,GAAG,MAAMR,OAAO,CAAE,qBAAF,EAAwB,KAAxB,EAA+B,IAA/B,EAAqC;AAChES,QAAAA,aAAa,EAAG,UAASV,KAAM;AADiC,OAArC,CAA7B;AAIAI,MAAAA,OAAO,CAACK,OAAD,CAAP;AAED,KAPD,CAOE,OAAOE,CAAP,EAAU,CAAE;AACf,GAT0B,EASxB,CAACX,KAAD,EAAQC,OAAR,CATwB,CAA3B;AAWAZ,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,OAAO;AACR,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;;AAIA,MAAIN,OAAJ,EAAa;AACX,wBAAO,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBACE;AAAA,cACI,CAACA,OAAD,IAAYC,aAAZ,iBAA6B,QAAC,eAAD;AAAiB,MAAA,aAAa,EAAEA;AAAhC;AAAA;AAAA;AAAA;AAAA;AADjC,mBADF;AAKD,CA9BM;;GAAOJ,iB;UAEeP,O;;;KAFfO,iB","sourcesContent":["import React, {useContext, useEffect, useState,useCallback} from 'react'\r\nimport {useHttp} from '../../hook/http.hook'\r\nimport { AuthContext } from './../../context/AuthContext'\r\nimport {Loader} from '../../сomponents/Loader'\r\nimport {NavLink, useHistory} from 'react-router-dom'\r\nimport '../../index.css'\r\nimport { Practice } from './Practice'\r\nimport { ListOfUsersTask } from './ListOfUsersTask'\r\n\r\n \r\nexport const  PracticeFromUsers = () =>{\r\n    const {token} = useContext(AuthContext)\r\n  const {request, loading} = useHttp()\r\n  const [taskfromusers, setTask] = useState(null)\r\n\r\n  const taskfromusersId = useParams().id\r\n  const getTask = useCallback(async () => {\r\n    try {\r\n      const fetched = await request(`/api/taskfromusers/`, 'GET', null, {\r\n        Authorization: `Bearer ${token}`\r\n      })\r\n\r\n      setTask(fetched)\r\n\r\n    } catch (e) {}\r\n  }, [token, request])\r\n\r\n  useEffect(() => {\r\n    getTask()\r\n  }, [getTask])\r\n\r\n  if (loading) {\r\n    return <Loader />\r\n  }\r\n\r\n  return (\r\n    <>\r\n      { !loading && taskfromusers && <ListOfUsersTask taskfromusers={taskfromusers} /> }\r\n    </>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}