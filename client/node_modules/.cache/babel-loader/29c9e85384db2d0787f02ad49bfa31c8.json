{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kusia\\\\Downloads\\\\Projects\\\\Diplom\\\\client\\\\src\\\\pages\\\\Forum\\\\ForumTheme.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useHttp } from '../hooks/http.hook';\nimport { AuthContext } from '../context/AuthContext';\nimport { Loader } from '../../сomponents/Loader';\nimport { ForumPostCard } from '../../сomponents/ForumPostCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ForumTheme = () => {\n  _s();\n\n  const {\n    token\n  } = useContext(AuthContext);\n  const {\n    request,\n    loading\n  } = useHttp();\n  const [post, setPost] = useState(null);\n  const postId = useParams().id;\n  const getPost = useCallback(async () => {\n    try {\n      const fetched = await request(`/api/link/${postId}`, 'GET', null, {\n        Authorization: `Bearer ${token}`\n      });\n      setPost(fetched);\n    } catch (e) {}\n  }, [token, postId, request]);\n  useEffect(() => {\n    getPost();\n  }, [getPost]);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !loading && post && /*#__PURE__*/_jsxDEV(ForumPostCard, {\n      link: post\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 29\n    }, this)\n  }, void 0, false);\n};\n\n_s(ForumTheme, \"jlC7O5D4aUUUTQZzJ9+7VZjh+1w=\", false, function () {\n  return [useHttp, useParams];\n});\n\n_c = ForumTheme;\n\nvar _c;\n\n$RefreshReg$(_c, \"ForumTheme\");","map":{"version":3,"sources":["C:/Users/Kusia/Downloads/Projects/Diplom/client/src/pages/Forum/ForumTheme.js"],"names":["React","useCallback","useContext","useEffect","useState","useParams","useHttp","AuthContext","Loader","ForumPostCard","ForumTheme","token","request","loading","post","setPost","postId","id","getPost","fetched","Authorization","e"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,WAAf,EAA4BC,UAA5B,EAAwCC,SAAxC,EAAmDC,QAAnD,QAAkE,OAAlE;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AACA,SAAQC,OAAR,QAAsB,oBAAtB;AACA,SAAQC,WAAR,QAA0B,wBAA1B;AACA,SAAQC,MAAR,QAAqB,yBAArB;AACA,SAAQC,aAAR,QAA4B,gCAA5B;;;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAC9B,QAAM;AAACC,IAAAA;AAAD,MAAUT,UAAU,CAACK,WAAD,CAA1B;AACA,QAAM;AAACK,IAAAA,OAAD;AAAUC,IAAAA;AAAV,MAAqBP,OAAO,EAAlC;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAMY,MAAM,GAAGX,SAAS,GAAGY,EAA3B;AAEA,QAAMC,OAAO,GAAGjB,WAAW,CAAC,YAAY;AACtC,QAAI;AACF,YAAMkB,OAAO,GAAG,MAAMP,OAAO,CAAE,aAAYI,MAAO,EAArB,EAAwB,KAAxB,EAA+B,IAA/B,EAAqC;AAChEI,QAAAA,aAAa,EAAG,UAAST,KAAM;AADiC,OAArC,CAA7B;AAGAI,MAAAA,OAAO,CAACI,OAAD,CAAP;AACD,KALD,CAKE,OAAOE,CAAP,EAAU,CAAE;AACf,GAP0B,EAOxB,CAACV,KAAD,EAAQK,MAAR,EAAgBJ,OAAhB,CAPwB,CAA3B;AASAT,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,OAAO;AACR,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;;AAIA,MAAIL,OAAJ,EAAa;AACX,wBAAO,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBACE;AAAA,cACI,CAACA,OAAD,IAAYC,IAAZ,iBAAoB,QAAC,aAAD;AAAe,MAAA,IAAI,EAAEA;AAArB;AAAA;AAAA;AAAA;AAAA;AADxB,mBADF;AAKD,CA5BM;;GAAMJ,U;UAEgBJ,O,EAEZD,S;;;KAJJK,U","sourcesContent":["import React, {useCallback, useContext, useEffect, useState} from 'react'\r\nimport {useParams} from 'react-router-dom'\r\nimport {useHttp} from '../hooks/http.hook'\r\nimport {AuthContext} from '../context/AuthContext'\r\nimport {Loader} from '../../сomponents/Loader'\r\nimport {ForumPostCard} from '../../сomponents/ForumPostCard'\r\n\r\nexport const ForumTheme = () => {\r\n  const {token} = useContext(AuthContext)\r\n  const {request, loading} = useHttp()\r\n  const [post, setPost] = useState(null)\r\n  const postId = useParams().id\r\n\r\n  const getPost = useCallback(async () => {\r\n    try {\r\n      const fetched = await request(`/api/link/${postId}`, 'GET', null, {\r\n        Authorization: `Bearer ${token}`\r\n      })\r\n      setPost(fetched)\r\n    } catch (e) {}\r\n  }, [token, postId, request])\r\n\r\n  useEffect(() => {\r\n    getPost()\r\n  }, [getPost])\r\n\r\n  if (loading) {\r\n    return <Loader />\r\n  }\r\n\r\n  return (\r\n    <>\r\n      { !loading && post && <ForumPostCard link={post} /> }\r\n    </>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}