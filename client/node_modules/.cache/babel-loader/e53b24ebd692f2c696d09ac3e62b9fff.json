{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kusia\\\\Downloads\\\\Projects\\\\Diplom\\\\client\\\\src\\\\pages\\\\Rate.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { useHttp } from '../hook/http.hook';\nimport { AuthContext } from '../context/AuthContext';\nimport { Loader } from '../сomponents/Loader';\nimport { RateList } from '../сomponents/RateList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Rate = () => {\n  _s();\n\n  const [users, setUsers] = useState([]);\n  const {\n    loading,\n    request\n  } = useHttp();\n  const {\n    token\n  } = useContext(AuthContext);\n  const auth = useContext(AuthContext);\n  console.log(auth.userId);\n  const [user, setUser] = useState('');\n  const fetchUsers = useCallback(async () => {\n    try {\n      const fetched = await request('/api/rate', 'GET', null, {\n        Authorization: `Bearer ${token}`\n      });\n      setUsers(fetched);\n    } catch (e) {}\n  }, [token, request]);\n  useEffect(() => {\n    fetchUsers();\n  }, [fetchUsers]);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !loading && /*#__PURE__*/_jsxDEV(RateList, {\n      users: users\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 20\n    }, this)\n  }, void 0, false);\n};\n\n_s(Rate, \"A4UgUD0TcGKuYmhIZ2WhWZIvA68=\", false, function () {\n  return [useHttp];\n});\n\n_c = Rate;\n\nvar _c;\n\n$RefreshReg$(_c, \"Rate\");","map":{"version":3,"sources":["C:/Users/Kusia/Downloads/Projects/Diplom/client/src/pages/Rate.js"],"names":["React","useCallback","useContext","useEffect","useState","useHttp","AuthContext","Loader","RateList","Rate","users","setUsers","loading","request","token","auth","console","log","userId","user","setUser","fetchUsers","fetched","Authorization","e"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,WAAf,EAA4BC,UAA5B,EAAwCC,SAAxC,EAAmDC,QAAnD,QAAkE,OAAlE;AACA,SAAQC,OAAR,QAAsB,mBAAtB;AACA,SAAQC,WAAR,QAA0B,wBAA1B;AACA,SAAQC,MAAR,QAAqB,sBAArB;AACA,SAAQC,QAAR,QAAuB,wBAAvB;;;AACA,OAAO,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACxB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAACQ,IAAAA,OAAD;AAAUC,IAAAA;AAAV,MAAqBR,OAAO,EAAlC;AACA,QAAM;AAACS,IAAAA;AAAD,MAAUZ,UAAU,CAACI,WAAD,CAA1B;AAEA,QAAMS,IAAI,GAAGb,UAAU,CAACI,WAAD,CAAvB;AACFU,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,MAAjB;AACE,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBhB,QAAQ,CAAC,EAAD,CAAhC;AAEA,QAAMiB,UAAU,GAAGpB,WAAW,CAAC,YAAY;AACzC,QAAI;AACF,YAAMqB,OAAO,GAAG,MAAMT,OAAO,CAAC,WAAD,EAAc,KAAd,EAAqB,IAArB,EAA2B;AACtDU,QAAAA,aAAa,EAAG,UAAST,KAAM;AADuB,OAA3B,CAA7B;AAGAH,MAAAA,QAAQ,CAACW,OAAD,CAAR;AACD,KALD,CAKE,OAAOE,CAAP,EAAU,CAAE;AACf,GAP6B,EAO3B,CAACV,KAAD,EAAQD,OAAR,CAP2B,CAA9B;AASAV,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,UAAU;AACX,GAFQ,EAEN,CAACA,UAAD,CAFM,CAAT;;AAIA,MAAIT,OAAJ,EAAa;AACX,wBAAO,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBACE;AAAA,cACG,CAACA,OAAD,iBAAY,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEF;AAAjB;AAAA;AAAA;AAAA;AAAA;AADf,mBADF;AAKD,CA/BM;;GAAMD,I;UAEgBJ,O;;;KAFhBI,I","sourcesContent":["import React, {useCallback, useContext, useEffect, useState} from 'react'\r\nimport {useHttp} from '../hook/http.hook'\r\nimport {AuthContext} from '../context/AuthContext'\r\nimport {Loader} from '../сomponents/Loader'\r\nimport {RateList} from '../сomponents/RateList'\r\nexport const Rate = () => {\r\n  const [users, setUsers] = useState([])\r\n  const {loading, request} = useHttp()\r\n  const {token} = useContext(AuthContext)\r\n  \r\n  const auth = useContext(AuthContext)\r\nconsole.log(auth.userId)\r\n  const [user, setUser] = useState('')\r\n\r\n  const fetchUsers = useCallback(async () => {\r\n    try {\r\n      const fetched = await request('/api/rate', 'GET', null, {\r\n        Authorization: `Bearer ${token}`\r\n      })\r\n      setUsers(fetched)\r\n    } catch (e) {}\r\n  }, [token, request])\r\n\r\n  useEffect(() => {\r\n    fetchUsers()\r\n  }, [fetchUsers])\r\n\r\n  if (loading) {\r\n    return <Loader/>\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {!loading && <RateList users={users} />}\r\n    </>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}