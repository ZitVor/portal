{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kusia\\\\Downloads\\\\Projects\\\\Diplom\\\\client\\\\src\\\\Auth\\\\YourTask.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState, useCallback } from 'react';\nimport { useHttp } from '../hook/http.hook';\nimport { CarriedOutList } from '../Auth/CarriedOutList';\nimport { AuthContext } from '../context/AuthContext';\nimport { useHistory, useParams, NavLink } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const YourTask = () => {\n  _s();\n\n  const [carriedouts, setCarriedouts] = useState([]);\n  const {\n    loading,\n    request\n  } = useHttp();\n  const {\n    token\n  } = useContext(AuthContext);\n  const auth = useContext(AuthContext);\n  const fetchCarriedouts = useCallback(async () => {\n    try {\n      const fetched = await request(`/api/decisive/carriedout/${auth.userId}`, 'GET', null, {\n        Authorization: `Bearer ${token}`\n      });\n      setCarriedouts(fetched);\n    } catch (e) {}\n  }, [token, request]);\n  useEffect(() => {\n    fetchCarriedouts();\n  }, [fetchCarriedouts]);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 14\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !loading && /*#__PURE__*/_jsxDEV(CarriedOutList, {\n      carriedouts: carriedouts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 22\n    }, this)\n  }, void 0, false);\n};\n\n_s(YourTask, \"ewSEI+xmBScRCrvpvsRa3b10RhU=\", false, function () {\n  return [useHttp];\n});\n\n_c = YourTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"YourTask\");","map":{"version":3,"sources":["C:/Users/Kusia/Downloads/Projects/Diplom/client/src/Auth/YourTask.js"],"names":["React","useContext","useEffect","useState","useCallback","useHttp","CarriedOutList","AuthContext","useHistory","useParams","NavLink","YourTask","carriedouts","setCarriedouts","loading","request","token","auth","fetchCarriedouts","fetched","userId","Authorization","e"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,SAA3B,EAAsCC,QAAtC,EAAgDC,WAAhD,QAAkE,OAAlE;AACA,SAAQC,OAAR,QAAsB,mBAAtB;AACA,SAAQC,cAAR,QAA6B,wBAA7B;AACA,SAAQC,WAAR,QAA0B,wBAA1B;AACA,SAAQC,UAAR,EAAoBC,SAApB,EAA+BC,OAA/B,QAA6C,kBAA7C;;;AAEA,OAAO,MAAMC,QAAQ,GAAG,MACxB;AAAA;;AACI,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM;AAACW,IAAAA,OAAD;AAAUC,IAAAA;AAAV,MAAqBV,OAAO,EAAlC;AACA,QAAM;AAACW,IAAAA;AAAD,MAAUf,UAAU,CAACM,WAAD,CAA1B;AACA,QAAMU,IAAI,GAAIhB,UAAU,CAACM,WAAD,CAAxB;AAEA,QAAMW,gBAAgB,GAAGd,WAAW,CAAC,YAAY;AAC/C,QAAI;AACF,YAAMe,OAAO,GAAG,MAAMJ,OAAO,CAAE,4BAA2BE,IAAI,CAACG,MAAO,EAAzC,EAA4C,KAA5C,EAAmD,IAAnD,EAAyD;AACpFC,QAAAA,aAAa,EAAG,UAASL,KAAM;AADqD,OAAzD,CAA7B;AAGAH,MAAAA,cAAc,CAACM,OAAD,CAAd;AACD,KALD,CAKE,OAAOG,CAAP,EAAU,CAAE;AACf,GAPmC,EAOjC,CAACN,KAAD,EAAQD,OAAR,CAPiC,CAApC;AASAb,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,gBAAgB;AACjB,GAFQ,EAEN,CAACA,gBAAD,CAFM,CAAT;;AAIA,MAAIJ,OAAJ,EAAa;AACX,wBAAO,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBACE;AAAA,cACG,CAACA,OAAD,iBAAY,QAAC,cAAD;AAAgB,MAAA,WAAW,EAAEF;AAA7B;AAAA;AAAA;AAAA;AAAA;AADf,mBADF;AAKH,CA7BM;;GAAMD,Q;UAGkBN,O;;;KAHlBM,Q","sourcesContent":["import React, {useContext, useEffect, useState, useCallback} from 'react'\r\nimport {useHttp} from '../hook/http.hook'\r\nimport {CarriedOutList} from '../Auth/CarriedOutList'\r\nimport {AuthContext} from '../context/AuthContext'\r\nimport {useHistory, useParams, NavLink} from 'react-router-dom'\r\n\r\nexport const YourTask = () => \r\n{ \r\n    const [carriedouts, setCarriedouts] = useState([])\r\n    const {loading, request} = useHttp()\r\n    const {token} = useContext(AuthContext)\r\n    const auth  = useContext(AuthContext)\r\n  \r\n    const fetchCarriedouts = useCallback(async () => {\r\n      try {\r\n        const fetched = await request(`/api/decisive/carriedout/${auth.userId}`, 'GET', null, {\r\n          Authorization: `Bearer ${token}`\r\n        })\r\n        setCarriedouts(fetched)\r\n      } catch (e) {}\r\n    }, [token, request])\r\n  \r\n    useEffect(() => {\r\n      fetchCarriedouts()\r\n    }, [fetchCarriedouts])\r\n  \r\n    if (loading) {\r\n      return <Loader/>\r\n    }\r\n  \r\n    return (\r\n      <>\r\n        {!loading && <CarriedOutList carriedouts={carriedouts} />}\r\n      </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}