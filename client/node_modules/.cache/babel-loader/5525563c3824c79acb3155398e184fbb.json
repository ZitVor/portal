{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kusia\\\\Downloads\\\\Projects\\\\Diplom\\\\client\\\\src\\\\Admin\\\\AdminPractice.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useCallback, useEffect } from 'react';\nimport { NavLink, useHistory } from 'react-router-dom';\nimport { Loader } from '../сomponents/Loader';\nimport { useHttp } from '../hook/http.hook';\nimport { AuthContext } from '../context/AuthContext';\nimport { AdminListOfPractice } from '../Admin/AdminListOfPractice';\nimport '../index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const AdminPractice = () => {\n  _s();\n\n  const [tasks, setTasks] = useState([]);\n  const {\n    loading,\n    request\n  } = useHttp();\n  const {\n    token\n  } = useContext(AuthContext);\n  const fetchTasks = useCallback(async () => {\n    try {\n      const fetched = await request('/api/admin/getpractice', 'GET', null, {\n        Authorization: `Bearer ${token}`\n      });\n      setTasks(fetched);\n    } catch (e) {}\n  }, [token, request]);\n  useEffect(() => {\n    fetchTasks();\n  }, [fetchTasks]);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !loading && /*#__PURE__*/_jsxDEV(AdminListOfPractice, {\n      tasks: tasks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 20\n    }, this)\n  }, void 0, false);\n};\n\n_s(AdminPractice, \"wCp1Yq5JACSvnwfJBFZs8F++03Y=\", false, function () {\n  return [useHttp];\n});\n\n_c = AdminPractice;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdminPractice\");","map":{"version":3,"sources":["C:/Users/Kusia/Downloads/Projects/Diplom/client/src/Admin/AdminPractice.js"],"names":["React","useContext","useState","useCallback","useEffect","NavLink","useHistory","Loader","useHttp","AuthContext","AdminListOfPractice","AdminPractice","tasks","setTasks","loading","request","token","fetchTasks","fetched","Authorization","e"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,UAAd,EAA0BC,QAA1B,EAAoCC,WAApC,EAAiDC,SAAjD,QAAiE,OAAjE;AACA,SAAQC,OAAR,EAAiBC,UAAjB,QAAkC,kBAAlC;AACA,SAAQC,MAAR,QAAqB,sBAArB;AACA,SAAQC,OAAR,QAAsB,mBAAtB;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAAQC,mBAAR,QAAkC,8BAAlC;AACA,OAAO,cAAP;;;AACA,OAAO,MAAMC,aAAa,GAAG,MAAM;AAAA;;AACjC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAACY,IAAAA,OAAD;AAAUC,IAAAA;AAAV,MAAqBP,OAAO,EAAlC;AACA,QAAM;AAACQ,IAAAA;AAAD,MAAUf,UAAU,CAACQ,WAAD,CAA1B;AAEA,QAAMQ,UAAU,GAAGd,WAAW,CAAC,YAAY;AACzC,QAAI;AACF,YAAMe,OAAO,GAAG,MAAMH,OAAO,CAAC,wBAAD,EAA2B,KAA3B,EAAkC,IAAlC,EAAwC;AACnEI,QAAAA,aAAa,EAAG,UAASH,KAAM;AADoC,OAAxC,CAA7B;AAGAH,MAAAA,QAAQ,CAACK,OAAD,CAAR;AACD,KALD,CAKE,OAAOE,CAAP,EAAU,CAAE;AACf,GAP6B,EAO3B,CAACJ,KAAD,EAAQD,OAAR,CAP2B,CAA9B;AASAX,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,UAAU;AACX,GAFQ,EAEN,CAACA,UAAD,CAFM,CAAT;;AAIA,MAAIH,OAAJ,EAAa;AACX,wBAAO,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBACE;AAAA,cACG,CAACA,OAAD,iBAAY,QAAC,mBAAD;AAAqB,MAAA,KAAK,EAAEF;AAA5B;AAAA;AAAA;AAAA;AAAA;AADf,mBADF;AAKD,CA3BM;;GAAMD,a;UAEgBH,O;;;KAFhBG,a","sourcesContent":["import React,{useContext, useState, useCallback, useEffect} from 'react'\r\nimport {NavLink, useHistory} from 'react-router-dom'\r\nimport {Loader} from '../сomponents/Loader'\r\nimport {useHttp} from '../hook/http.hook'\r\nimport { AuthContext } from '../context/AuthContext'\r\nimport {AdminListOfPractice} from '../Admin/AdminListOfPractice'\r\nimport '../index.css'\r\nexport const AdminPractice = () => {\r\n  const [tasks, setTasks] = useState([])\r\n  const {loading, request} = useHttp()\r\n  const {token} = useContext(AuthContext)\r\n\r\n  const fetchTasks = useCallback(async () => {\r\n    try {\r\n      const fetched = await request('/api/admin/getpractice', 'GET', null, {\r\n        Authorization: `Bearer ${token}`\r\n      })\r\n      setTasks(fetched)\r\n    } catch (e) {}\r\n  }, [token, request])\r\n\r\n  useEffect(() => {\r\n    fetchTasks()\r\n  }, [fetchTasks])\r\n\r\n  if (loading) {\r\n    return <Loader/>\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {!loading && <AdminListOfPractice tasks={tasks} />}\r\n    </>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}