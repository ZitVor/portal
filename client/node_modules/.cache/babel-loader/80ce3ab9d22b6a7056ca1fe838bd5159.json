{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kusia\\\\Downloads\\\\Projects\\\\Diplom\\\\client\\\\src\\\\pages\\\\Practice\\\\UserTask.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { AuthContext } from './../../context/AuthContext';\nimport { useHistory, useParams } from 'react-router-dom';\nimport '../../index.css';\nimport { useHttp } from '../../hook/http.hook';\nimport { UserTaskCard } from '../../сomponents/UserTaskCard';\nimport { Loader } from '../../сomponents/Loader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const UserTask = () => {\n  _s();\n\n  const {\n    token\n  } = useContext(AuthContext);\n  const {\n    request,\n    loading\n  } = useHttp();\n  const [taskfromusers, setTask] = useState(null);\n  const taskfromusersId = useParams().id;\n  const getTask = useCallback(async () => {\n    try {\n      const fetched = await request(`/api/taskfromusers/${taskfromusersId}`, 'GET', null, {\n        Authorization: `Bearer ${token}`\n      });\n      setTask(fetched);\n    } catch (e) {}\n  }, [token, taskfromusersId, request]);\n  useEffect(() => {\n    getTask();\n  }, [getTask]);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !loading && taskfromusers && /*#__PURE__*/_jsxDEV(LinkCard, {\n      link: link\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 38\n    }, this)\n  }, void 0, false);\n};\n\n_s(UserTask, \"YbUfGDz2y+vXjkBJYumKeO/F1O8=\", false, function () {\n  return [useHttp, useParams];\n});\n\n_c = UserTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserTask\");","map":{"version":3,"sources":["C:/Users/Kusia/Downloads/Projects/Diplom/client/src/pages/Practice/UserTask.js"],"names":["React","useCallback","useContext","useEffect","useState","AuthContext","useHistory","useParams","useHttp","UserTaskCard","Loader","UserTask","token","request","loading","taskfromusers","setTask","taskfromusersId","id","getTask","fetched","Authorization","e","link"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,WAAd,EAA2BC,UAA3B,EAAuCC,SAAvC,EAAkDC,QAAlD,QAAiE,OAAjE;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,SAAQC,UAAR,EAAoBC,SAApB,QAAoC,kBAApC;AACA,OAAO,iBAAP;AACA,SAAQC,OAAR,QAAsB,sBAAtB;AACA,SAAQC,YAAR,QAA2B,+BAA3B;AACA,SAAQC,MAAR,QAAqB,yBAArB;;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAC5B,QAAM;AAACC,IAAAA;AAAD,MAAUV,UAAU,CAACG,WAAD,CAA1B;AACA,QAAM;AAACQ,IAAAA,OAAD;AAAUC,IAAAA;AAAV,MAAqBN,OAAO,EAAlC;AACA,QAAM,CAACO,aAAD,EAAgBC,OAAhB,IAA2BZ,QAAQ,CAAC,IAAD,CAAzC;AACA,QAAMa,eAAe,GAAGV,SAAS,GAAGW,EAApC;AAEA,QAAMC,OAAO,GAAGlB,WAAW,CAAC,YAAY;AACtC,QAAI;AACF,YAAMmB,OAAO,GAAG,MAAMP,OAAO,CAAE,sBAAqBI,eAAgB,EAAvC,EAA0C,KAA1C,EAAiD,IAAjD,EAAuD;AAClFI,QAAAA,aAAa,EAAG,UAAST,KAAM;AADmD,OAAvD,CAA7B;AAGAI,MAAAA,OAAO,CAACI,OAAD,CAAP;AAED,KAND,CAME,OAAOE,CAAP,EAAU,CAAE;AACf,GAR0B,EAQxB,CAACV,KAAD,EAAQK,eAAR,EAAyBJ,OAAzB,CARwB,CAA3B;AAUAV,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,OAAO;AACR,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;;AAIA,MAAIL,OAAJ,EAAa;AACX,wBAAO,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBACE;AAAA,cACI,CAACA,OAAD,IAAYC,aAAZ,iBAA6B,QAAC,QAAD;AAAU,MAAA,IAAI,EAAEQ;AAAhB;AAAA;AAAA;AAAA;AAAA;AADjC,mBADF;AAKD,CA7BM;;GAAMZ,Q;UAEgBH,O,EAEHD,S;;;KAJbI,Q","sourcesContent":["import React,{useCallback, useContext, useEffect, useState} from 'react'\r\nimport { AuthContext } from './../../context/AuthContext'\r\nimport {useHistory, useParams} from 'react-router-dom'\r\nimport '../../index.css'\r\nimport {useHttp} from '../../hook/http.hook'\r\nimport {UserTaskCard} from '../../сomponents/UserTaskCard'\r\nimport {Loader} from '../../сomponents/Loader'\r\nexport const UserTask = () => {\r\n  const {token} = useContext(AuthContext)\r\n  const {request, loading} = useHttp()\r\n  const [taskfromusers, setTask] = useState(null)\r\n  const taskfromusersId = useParams().id\r\n\r\n  const getTask = useCallback(async () => {\r\n    try {\r\n      const fetched = await request(`/api/taskfromusers/${taskfromusersId}`, 'GET', null, {\r\n        Authorization: `Bearer ${token}`\r\n      })\r\n      setTask(fetched)\r\n\r\n    } catch (e) {}\r\n  }, [token, taskfromusersId, request])\r\n\r\n  useEffect(() => {\r\n    getTask()\r\n  }, [getTask])\r\n\r\n  if (loading) {\r\n    return <Loader />\r\n  }\r\n\r\n  return (\r\n    <>\r\n      { !loading && taskfromusers && <LinkCard link={link} /> }\r\n    </>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}