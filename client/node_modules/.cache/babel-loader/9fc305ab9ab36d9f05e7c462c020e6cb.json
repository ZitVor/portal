{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kusia\\\\Downloads\\\\Projects\\\\Diplom\\\\client\\\\src\\\\pages\\\\Practice\\\\UserTask.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { AuthContext } from './../../context/AuthContext';\nimport { NavLink, useHistory, useParams } from 'react-router-dom';\nimport '../../index.css';\nimport { Practice } from './Practice';\nimport { request } from 'express';\nimport { UserTaskCard } from '../../сomponents/UserTaskCard'; //TODO доступ только по количеству баллов\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const UserTask = () => {\n  _s();\n\n  const history = useHistory();\n  const {\n    token\n  } = useContext(AuthContext);\n  const [taskfromusers, setTask] = useState(null);\n  const taskfromusersId = useParams().id;\n  const getTaskfromusers = useCallback(async () => {\n    try {\n      const fetched = await request('/api/link/${linkId}', 'GET', null, {\n        Authorization: `Bearer ${token}`\n      });\n      setLink(fetched);\n    } catch (e) {}\n  }, [token, taskfromusersId, request]);\n  useEffect(() => {\n    getTaskfromusers();\n  }, [getTaskfromusers]);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !loading && taskfromusers && /*#__PURE__*/_jsxDEV(UserTaskCard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 42\n    }, this)\n  }, void 0, false);\n};\n\n_s(UserTask, \"xezwOIOavbeA9WRLLY1RV8qMvwc=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = UserTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserTask\");","map":{"version":3,"sources":["C:/Users/Kusia/Downloads/Projects/Diplom/client/src/pages/Practice/UserTask.js"],"names":["React","useCallback","useContext","useEffect","useState","AuthContext","NavLink","useHistory","useParams","Practice","request","UserTaskCard","UserTask","history","token","taskfromusers","setTask","taskfromusersId","id","getTaskfromusers","fetched","Authorization","setLink","e","loading"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,WAAd,EAA2BC,UAA3B,EAAuCC,SAAvC,EAAkDC,QAAlD,QAAiE,OAAjE;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,SAAQC,OAAR,EAAiBC,UAAjB,EAA6BC,SAA7B,QAA6C,kBAA7C;AACA,OAAO,iBAAP;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,OAAT,QAAwB,SAAxB;AACA,SAAQC,YAAR,QAA2B,+BAA3B,C,CACA;;;;AAEA,OAAO,MAAOC,QAAQ,GAAG,MAAK;AAAA;;AAC1B,QAAMC,OAAO,GAAGN,UAAU,EAA1B;AACA,QAAM;AAACO,IAAAA;AAAD,MAAUZ,UAAU,CAACG,WAAD,CAA1B;AACA,QAAM,CAACU,aAAD,EAAgBC,OAAhB,IAA2BZ,QAAQ,CAAC,IAAD,CAAzC;AACA,QAAMa,eAAe,GAAGT,SAAS,GAAGU,EAApC;AAEA,QAAMC,gBAAgB,GAAGlB,WAAW,CAAC,YAAU;AAC3C,QAAG;AACC,YAAMmB,OAAO,GAAG,MAAMV,OAAO,CAAC,qBAAD,EAAwB,KAAxB,EAA+B,IAA/B,EAAoC;AAC7DW,QAAAA,aAAa,EAAG,UAASP,KAAM;AAD8B,OAApC,CAA7B;AAGAQ,MAAAA,OAAO,CAACF,OAAD,CAAP;AACH,KALD,CAMA,OAAMG,CAAN,EAAQ,CAEP;AACJ,GAVmC,EAUjC,CAACT,KAAD,EAAQG,eAAR,EAA2BP,OAA3B,CAViC,CAApC;AAYAP,EAAAA,SAAS,CAAC,MAAI;AACVgB,IAAAA,gBAAgB;AACnB,GAFQ,EAEP,CAACA,gBAAD,CAFO,CAAT;;AAIA,MAAGK,OAAH,EAAW;AACP,wBAAO,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AACD,sBACG;AAAA,cACK,CAACA,OAAD,IAAYT,aAAZ,iBAA6B,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AADlC,mBADH;AAKH,CA9BM;;GAAOH,Q;UACML,U,EAGQC,S;;;KAJdI,Q","sourcesContent":["import React,{useCallback, useContext, useEffect, useState} from 'react'\r\nimport { AuthContext } from './../../context/AuthContext'\r\nimport {NavLink, useHistory, useParams} from 'react-router-dom'\r\nimport '../../index.css'\r\nimport { Practice } from './Practice'\r\nimport { request } from 'express'\r\nimport {UserTaskCard} from '../../сomponents/UserTaskCard'\r\n//TODO доступ только по количеству баллов\r\n\r\nexport const  UserTask = () =>{\r\n    const history = useHistory()\r\n    const {token} = useContext(AuthContext)\r\n    const [taskfromusers, setTask] = useState(null)\r\n    const taskfromusersId = useParams().id\r\n    \r\n    const getTaskfromusers = useCallback(async() =>{\r\n        try{\r\n            const fetched = await request('/api/link/${linkId}', 'GET', null,{\r\n                Authorization: `Bearer ${token}`\r\n            })\r\n            setLink(fetched)\r\n        }\r\n        catch(e){\r\n\r\n        }\r\n    }, [token, taskfromusersId ,  request])\r\n\r\n    useEffect(()=>{\r\n        getTaskfromusers()\r\n    },[getTaskfromusers])\r\n\r\n    if(loading){\r\n        return <Loader/>\r\n    }\r\n    return(\r\n       <>\r\n           {!loading && taskfromusers && <UserTaskCard/>}\r\n       </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}