{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kusia\\\\Downloads\\\\Projects\\\\Diplom\\\\client\\\\src\\\\pages\\\\SuperUser\\\\DecisionCall.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useCallback, useEffect } from 'react';\nimport { NavLink, useHistory } from 'react-router-dom';\nimport { Loader } from '../../сomponents/Loader';\nimport { useHttp } from '../../hook/http.hook';\nimport { AuthContext } from '../../context/AuthContext';\nimport { DesicionList } from './DesicionList';\nimport '../../index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const DecisionCall = () => {\n  _s();\n\n  const [decisions, setDecisions] = useState([]);\n  const {\n    loading,\n    request\n  } = useHttp();\n  const {\n    token\n  } = useContext(AuthContext);\n  const fetchDecisions = useCallback(async () => {\n    try {\n      const fetched = await request('/api/desicion/notresolved', 'GET', null, {\n        Authorization: `Bearer ${token}`\n      });\n      setDecisions(fetched);\n    } catch (e) {}\n  }, [token, request]);\n  useEffect(() => {\n    fetchDecisions();\n  }, [fetchDecisions]);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !loading && /*#__PURE__*/_jsxDEV(DecisionList, {\n      decisions: decisions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 20\n    }, this)\n  }, void 0, false);\n};\n\n_s(DecisionCall, \"BL7lRSiO/n2Kbmnu9Fs3Bhu9kfQ=\", false, function () {\n  return [useHttp];\n});\n\n_c = DecisionCall;\n\nvar _c;\n\n$RefreshReg$(_c, \"DecisionCall\");","map":{"version":3,"sources":["C:/Users/Kusia/Downloads/Projects/Diplom/client/src/pages/SuperUser/DecisionCall.js"],"names":["React","useContext","useState","useCallback","useEffect","NavLink","useHistory","Loader","useHttp","AuthContext","DesicionList","DecisionCall","decisions","setDecisions","loading","request","token","fetchDecisions","fetched","Authorization","e"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,UAAd,EAA0BC,QAA1B,EAAoCC,WAApC,EAAiDC,SAAjD,QAAiE,OAAjE;AACA,SAAQC,OAAR,EAAiBC,UAAjB,QAAkC,kBAAlC;AACA,SAAQC,MAAR,QAAqB,yBAArB;AACA,SAAQC,OAAR,QAAsB,sBAAtB;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,OAAO,iBAAP;;;AACA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAChC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM;AAACY,IAAAA,OAAD;AAAUC,IAAAA;AAAV,MAAqBP,OAAO,EAAlC;AACA,QAAM;AAACQ,IAAAA;AAAD,MAAUf,UAAU,CAACQ,WAAD,CAA1B;AAEA,QAAMQ,cAAc,GAAGd,WAAW,CAAC,YAAY;AAC7C,QAAI;AACF,YAAMe,OAAO,GAAG,MAAMH,OAAO,CAAC,2BAAD,EAA8B,KAA9B,EAAqC,IAArC,EAA2C;AACtEI,QAAAA,aAAa,EAAG,UAASH,KAAM;AADuC,OAA3C,CAA7B;AAGAH,MAAAA,YAAY,CAACK,OAAD,CAAZ;AACD,KALD,CAKE,OAAOE,CAAP,EAAU,CAAE;AACf,GAPiC,EAO/B,CAACJ,KAAD,EAAQD,OAAR,CAP+B,CAAlC;AASAX,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,cAAc;AACf,GAFQ,EAEN,CAACA,cAAD,CAFM,CAAT;;AAIA,MAAIH,OAAJ,EAAa;AACX,wBAAO,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBACE;AAAA,cACG,CAACA,OAAD,iBAAY,QAAC,YAAD;AAAc,MAAA,SAAS,EAAEF;AAAzB;AAAA;AAAA;AAAA;AAAA;AADf,mBADF;AAKD,CA3BM;;GAAMD,Y;UAEgBH,O;;;KAFhBG,Y","sourcesContent":["import React,{useContext, useState, useCallback, useEffect} from 'react'\r\nimport {NavLink, useHistory} from 'react-router-dom'\r\nimport {Loader} from '../../сomponents/Loader'\r\nimport {useHttp} from '../../hook/http.hook'\r\nimport { AuthContext } from '../../context/AuthContext'\r\nimport { DesicionList } from './DesicionList'\r\nimport '../../index.css'\r\nexport const DecisionCall = () => {\r\n  const [decisions, setDecisions] = useState([])\r\n  const {loading, request} = useHttp()\r\n  const {token} = useContext(AuthContext)\r\n\r\n  const fetchDecisions = useCallback(async () => {\r\n    try {\r\n      const fetched = await request('/api/desicion/notresolved', 'GET', null, {\r\n        Authorization: `Bearer ${token}`\r\n      })\r\n      setDecisions(fetched)\r\n    } catch (e) {}\r\n  }, [token, request])\r\n\r\n  useEffect(() => {\r\n    fetchDecisions()\r\n  }, [fetchDecisions])\r\n\r\n  if (loading) {\r\n    return <Loader/>\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {!loading && <DecisionList decisions={decisions} />}\r\n    </>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}