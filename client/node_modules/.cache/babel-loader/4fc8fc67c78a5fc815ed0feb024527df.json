{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kusia\\\\Downloads\\\\Projects\\\\Diplom\\\\client\\\\src\\\\Admin\\\\AdminComments.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useCallback, useEffect } from 'react';\nimport { Loader } from '../сomponents/Loader';\nimport { useHttp } from '../hook/http.hook';\nimport { AuthContext } from '../context/AuthContext';\nimport { AdminListOfPractice } from '../Admin/AdminListOfPractice';\nimport '../index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const AdminComments = () => {\n  _s();\n\n  const [comments, setComments] = useState([]);\n  const {\n    loading,\n    request\n  } = useHttp();\n  const {\n    token\n  } = useContext(AuthContext);\n  const fetchComments = useCallback(async () => {\n    try {\n      const fetched = await request('/api/admin/getcomments', 'GET', null, {\n        Authorization: `Bearer ${token}`\n      });\n      setComments(fetched);\n    } catch (e) {}\n  }, [token, request]);\n  useEffect(() => {\n    fetchComments();\n  }, [fetchComments]);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !loading && /*#__PURE__*/_jsxDEV(AdminListOfPractice, {\n      comments: comments\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 20\n    }, this)\n  }, void 0, false);\n};\n\n_s(AdminComments, \"JwcicrbLI96b8k7jv5uwN3c6tjs=\", false, function () {\n  return [useHttp];\n});\n\n_c = AdminComments;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdminComments\");","map":{"version":3,"sources":["C:/Users/Kusia/Downloads/Projects/Diplom/client/src/Admin/AdminComments.js"],"names":["React","useContext","useState","useCallback","useEffect","Loader","useHttp","AuthContext","AdminListOfPractice","AdminComments","comments","setComments","loading","request","token","fetchComments","fetched","Authorization","e"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,UAAd,EAA0BC,QAA1B,EAAoCC,WAApC,EAAiDC,SAAjD,QAAiE,OAAjE;AACA,SAAQC,MAAR,QAAqB,sBAArB;AACA,SAAQC,OAAR,QAAsB,mBAAtB;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAAQC,mBAAR,QAAkC,8BAAlC;AACA,OAAO,cAAP;;;AACA,OAAO,MAAMC,aAAa,GAAG,MAAM;AAAA;;AACjC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM;AAACU,IAAAA,OAAD;AAAUC,IAAAA;AAAV,MAAqBP,OAAO,EAAlC;AACA,QAAM;AAACQ,IAAAA;AAAD,MAAUb,UAAU,CAACM,WAAD,CAA1B;AAEA,QAAMQ,aAAa,GAAGZ,WAAW,CAAC,YAAY;AAC5C,QAAI;AACF,YAAMa,OAAO,GAAG,MAAMH,OAAO,CAAC,wBAAD,EAA2B,KAA3B,EAAkC,IAAlC,EAAwC;AACnEI,QAAAA,aAAa,EAAG,UAASH,KAAM;AADoC,OAAxC,CAA7B;AAGAH,MAAAA,WAAW,CAACK,OAAD,CAAX;AACD,KALD,CAKE,OAAOE,CAAP,EAAU,CAAE;AACf,GAPgC,EAO9B,CAACJ,KAAD,EAAQD,OAAR,CAP8B,CAAjC;AASAT,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,aAAa;AACd,GAFQ,EAEN,CAACA,aAAD,CAFM,CAAT;;AAIA,MAAIH,OAAJ,EAAa;AACX,wBAAO,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBACE;AAAA,cACG,CAACA,OAAD,iBAAY,QAAC,mBAAD;AAAqB,MAAA,QAAQ,EAAEF;AAA/B;AAAA;AAAA;AAAA;AAAA;AADf,mBADF;AAKD,CA3BM;;GAAMD,a;UAEgBH,O;;;KAFhBG,a","sourcesContent":["import React,{useContext, useState, useCallback, useEffect} from 'react'\r\nimport {Loader} from '../сomponents/Loader'\r\nimport {useHttp} from '../hook/http.hook'\r\nimport { AuthContext } from '../context/AuthContext'\r\nimport {AdminListOfPractice} from '../Admin/AdminListOfPractice'\r\nimport '../index.css'\r\nexport const AdminComments = () => {\r\n  const [comments, setComments] = useState([])\r\n  const {loading, request} = useHttp()\r\n  const {token} = useContext(AuthContext)\r\n\r\n  const fetchComments = useCallback(async () => {\r\n    try {\r\n      const fetched = await request('/api/admin/getcomments', 'GET', null, {\r\n        Authorization: `Bearer ${token}`\r\n      })\r\n      setComments(fetched)\r\n    } catch (e) {}\r\n  }, [token, request])\r\n\r\n  useEffect(() => {\r\n    fetchComments()\r\n  }, [fetchComments])\r\n\r\n  if (loading) {\r\n    return <Loader/>\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {!loading && <AdminListOfPractice comments={comments} />}\r\n    </>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}